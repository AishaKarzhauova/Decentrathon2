import React, { useState, useEffect } from "react";
import axios from "axios";

const Register = () => {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + confirm_password
    const [formData, setFormData] = useState({
        nickname: "",
        first_name: "",
        last_name: "",
        phone: "",
        wallet_address: "",
        password: "",
        confirm_password: ""
    });

    const [message, setMessage] = useState("");
    const [isHover, setIsHover] = useState(false);
    const [disableSubmit, setDisableSubmit] = useState(false);

    // üîπ –ü—Ä–∏ –∫–∞–∂–¥–æ–º –≤–≤–æ–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    useEffect(() => {
        if (formData.password && formData.confirm_password) {
            setDisableSubmit(formData.password !== formData.confirm_password);
        } else {
            setDisableSubmit(false);
        }
    }, [formData.password, formData.confirm_password]);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        if (formData.password !== formData.confirm_password) {
            setMessage("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
            return;
        }
        try {
            const { confirm_password, ...payload } = formData; // confirm_password –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥
            const response = await axios.post("http://127.0.0.1:8000/user/register", payload, {
                headers: { "Content-Type": "application/json" }
            });
            setMessage("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
            console.log("–£—Å–ø–µ—Ö:", response.data);
        } catch (error) {
            setMessage("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + (error.response?.data?.detail || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
            console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.response?.data);
        }
    };

    // üîπ –ü–æ–¥–∫–ª—é—á–∏–º Google Font (Montserrat) —á–µ—Ä–µ–∑ inline-—Å—Ç–∏–ª—å
    // –û–±—ã—á–Ω–æ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –≤ index.html, –Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
    useEffect(() => {
        const link = document.createElement("link");
        link.href = "https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap";
        link.rel = "stylesheet";
        document.head.appendChild(link);
        return () => {
            document.head.removeChild(link);
        };
    }, []);

    // üîπ –°—Ç–∏–ª–∏ —Ñ–æ–Ω–∞ –∏ –æ–±—â–∏–µ
    const pageStyle = {
        minHeight: "100vh",
        margin: 0,
        padding: 0,
        background: "radial-gradient(circle at top, #222 0%, #111 100%)",  // –¢—ë–º–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        fontFamily: "'Montserrat', sans-serif",
    };

    const containerStyle = {
        width: "420px",
        padding: "30px",
        borderRadius: "8px",
        backgroundColor: "rgba(30, 30, 47, 0.9)", // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        boxShadow: "0 0 10px rgba(0,0,0,0.3)",
        color: "#FFFFFF",
    };

    const headerStyle = {
        marginBottom: "20px",
        textAlign: "center",
        color: "#00FFC2",
        fontSize: "1.5rem",
        fontWeight: 600,
        textShadow: "0 0 5px rgba(0,255,194,0.4)",
    };

    const formStyle = {
        display: "flex",
        flexDirection: "column",
        gap: "12px",
    };

    const inputStyle = {
        padding: "10px",
        borderRadius: "6px",
        border: "1px solid #444",
        backgroundColor: "#2C2C3A",
        color: "#fff",
        outline: "none",
        fontSize: "0.95rem",
    };

    const buttonStyle = {
        padding: "12px",
        borderRadius: "6px",
        border: "none",
        backgroundColor: disableSubmit ? "#555" : "#00FFC2",
        color: "#000",
        fontWeight: 600,
        cursor: disableSubmit ? "not-allowed" : "pointer",
        transition: "background-color 0.2s ease",
    };

    const buttonHover = {
        backgroundColor: disableSubmit ? "#555" : "#00E6AE",
    };

    const messageStyle = {
        marginTop: "15px",
        textAlign: "center",
        fontSize: "0.95rem",
        backgroundColor: "#2C2C3A",
        padding: "10px",
        borderRadius: "6px",
    };

    return (
        <div style={pageStyle}>
            <div style={containerStyle}>
                <h2 style={headerStyle}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
                <form onSubmit={handleSubmit} style={formStyle}>
                    <input
                        style={inputStyle}
                        type="text"
                        name="nickname"
                        placeholder="–ù–∏–∫–Ω–µ–π–º"
                        value={formData.nickname}
                        onChange={handleChange}
                        required
                    />
                    <input
                        style={inputStyle}
                        type="text"
                        name="first_name"
                        placeholder="–ò–º—è"
                        value={formData.first_name}
                        onChange={handleChange}
                        required
                    />
                    <input
                        style={inputStyle}
                        type="text"
                        name="last_name"
                        placeholder="–§–∞–º–∏–ª–∏—è"
                        value={formData.last_name}
                        onChange={handleChange}
                        required
                    />
                    <input
                        style={inputStyle}
                        type="tel"
                        name="phone"
                        placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                        value={formData.phone}
                        onChange={handleChange}
                        required
                    />
                    <input
                        style={inputStyle}
                        type="text"
                        name="wallet_address"
                        placeholder="–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"
                        value={formData.wallet_address}
                        onChange={handleChange}
                        required
                    />
                    <input
                        style={inputStyle}
                        type="password"
                        name="password"
                        placeholder="–ü–∞—Ä–æ–ª—å"
                        value={formData.password}
                        onChange={handleChange}
                        required
                    />
                    <input
                        style={inputStyle}
                        type="password"
                        name="confirm_password"
                        placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                        value={formData.confirm_password}
                        onChange={handleChange}
                        required
                    />
                    <button
                        type="submit"
                        style={{ 
                            ...buttonStyle,
                            ...(isHover ? buttonHover : {})
                        }}
                        onMouseEnter={() => setIsHover(true)}
                        onMouseLeave={() => setIsHover(false)}
                        disabled={disableSubmit}
                    >
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    </button>
                </form>

                {message && <p style={messageStyle}>{message}</p>}
            </div>
        </div>
    );
};

export default Register;
