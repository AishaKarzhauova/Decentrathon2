import React, { useState, useEffect } from "react";
import axios from "axios";
import { ethers } from "ethers";

const Vote = () => {
    const [polls, setPolls] = useState([]);
    const [selectedPoll, setSelectedPoll] = useState(null);
    const [selectedCandidate, setSelectedCandidate] = useState("");
    const [message, setMessage] = useState("");

    useEffect(() => {
        fetchPolls();
    }, []);

    async function fetchPolls() {
        try {
            const response = await axios.get("http://127.0.0.1:8000/polls/list/");
            setPolls(response.data);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:", error);
            setMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.");
        }
    }

    async function vote() {
        if (!selectedPoll || !selectedCandidate) {
            alert("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!");
            return;
        }

        if (!window.ethereum) {
            alert("MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            return;
        }

        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const userAddress = await signer.getAddress();

        try {
            // üî¥ –ó–∞–ø—Ä–æ—Å "—Å—ã—Ä–æ–π" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await axios.post(
                `http://127.0.0.1:8000/vote/${selectedPoll}/${selectedCandidate}`,
                {},
                { headers: { Authorization: `Bearer ${localStorage.getItem("token")}` } }
            );

            const txData = response.data.transaction;
            if (!txData) {
                alert("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.");
                return;
            }

            // üîµ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ MetaMask
            const tx = await signer.sendTransaction({
                to: txData.to,
                value: txData.value ? ethers.toBigInt(txData.value) : 0n,
                gasLimit: txData.gas,
                gasPrice: txData.gasPrice,
                nonce: txData.nonce,
                data: txData.data
            });

            setMessage(`–ì–æ–ª–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx.hash}`);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:", error);
            setMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: ${error.response?.data?.detail || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
        }
    }

    return (
        <div>
            <h1>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</h1>
            {polls.length === 0 ? (
                <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.</p>
            ) : (
                <div>
                    <label>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:</label>
                    <select onChange={(e) => setSelectedPoll(e.target.value)}>
                        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ --</option>
                        {polls.map((poll) => (
                            <option key={poll.id} value={poll.id}>{poll.name}</option>
                        ))}
                    </select>
                </div>
            )}

            {selectedPoll && (
                <div>
                    <label>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</label>
                    <select onChange={(e) => setSelectedCandidate(e.target.value)}>
                        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ --</option>
                        {polls.find(p => p.id == selectedPoll)?.candidates.map((candidate, index) => (
                            <option key={index} value={candidate}>{candidate}</option>
                        ))}   
                    </select>
                    <button onClick={vote}>–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å</button>
                </div>
            )}

            {message && <p>{message}</p>}
        </div>
    );
};

export default Vote;
